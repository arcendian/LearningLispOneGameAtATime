#+TITLE: Guess My Number
#+AUTHOR: Michael Espe√±a
#+DESCRIPTION: A not-so-good notes on creating guess-my-number in Common Lisp.

* Table of contents :TOC:
- [[#creating-your-first-lisp-program][Creating your first Lisp program]]
- [[#defining-global-variables][Defining global variables]]
  - [[#guess-my-number][Guess my number]]
- [[#defining-global-functions][Defining global functions]]
  - [[#defining-the-guess-my-number-function][Defining the guess-my-number function]]
  - [[#defining-smaller-and-bigger-function][Defining smaller and bigger function]]
  - [[#definiing-the-start-over-function][Definiing the start-over function]]
- [[#defining-local-variables][Defining local variables]]
- [[#defining-local-functions][Defining local functions]]
  - [[#flet][flet]]
  - [[#labels][labels]]
- [[#summary][Summary]]

* Creating your first Lisp program

In this section we create our first lisp program by making a simple guess my number game. We learn some basics of lisp; first defining variables and such.


* Defining global variables

To define global variables in Lisp we use the *defparameter* or *defvar* keywords.

+ Variables declared using ~defparameter~ can be overwritten.
+ Variables declared using ~defvar~ are immutable.


#+begin_src common-lisp

  ;; using defparameter
  (defparameter *small* 1)
  (defparameter *big* 100)

  ;; or

  ;; using defvar
  (defvar *small* 1)
  (defvar *big* 100)


#+end_src


*NOTE*: We used asterisks(*) -- affectionately called /earmuffs/ -- around the global variables we defined, these are completely arbitrary and optional and is ignored by Lisp. Nonetheless, this is a convention for that most Lispers do and is considered best practice to distinguish them from local variables.


** Guess my number

Guess my number is a simple game where a number taken from a certain range is to be guessed. It goes like this as described in the book:

1. Determine the upper and lower (big and small) limit of the player's number. Since the range is between 1 and 100, the smallest possible number would be 1 and the biggest would be 100.
2. Guess a number in between these two numbers.
3. If the player says the number is smaller, lower the big limit.
4. If the player says the number is bigger, raise the small limit.

We employ binary search, i.e., cutting the range of possible numbers in half with every guess, so we can quickly arrive at the right answer.


* Defining global functions

To define global functions in lisp we use the ~defun~ keyword, like so:

#+begin_example

(defun function_name (arguments)
  ...)

#+end_example

** Defining the guess-my-number function

#+begin_src common-lisp

  (defun guess-my-number ()
    (ash (+ *small* *big*) -1))

#+end_src

The function *guess-my-number*:
+ does not take any argument as indicated by the empty pair of parentheses after the function name
+ uses the builtin ~ash~ function to halve the sum returned by adding SMALL and BIG. The ash function is equivalent of the bitwise shift operators you see in most programming languages. For example,

#+begin_src common-lisp

(ash 7 1)  ;; returns 14
(ash 7 -1) ;; returns 3

#+end_src

** Defining smaller and bigger function

+ ~smaller~: diminish the upper limit by one and return half of its sum with the lower limit.
+ ~bigger~: increase the lower limit by one and return half of its sum with the lower limit.

#+begin_src common-lisp

  (defun smaller ()
      (setf *big* (1- (guess-my-number)))
      (guess-my-number))

  (defun bigger ()
      (setf *small* (1+ (guess-my-number)))
      (guess-my-number))

#+end_src

** Definiing the start-over function

Redefine the limits and start the game again.

#+begin_src common-lisp

  (defun start-over ()
    (defparameter *small* 1)
    (defparameter *big* 100)
    (guess-my-number))

#+end_src

* Defining local variables

Use the ~let~ keyword to define local variables.

#+begin_src common-lisp

  ;; define local variables a and b
  ;; and add them
  (let ((a 5)
	(b 6))
    (+ a b))     ;; returns 11

#+end_src

* Defining local functions

** flet

Use the ~flet~ keyword to define local functions not visible outside its scope(?).

#+begin_src common-lisp

  ;; define function f(n) = n + 10
  (flet ((f (n)
	     (+ n 10)))
      (f 5))              ;; returns 15

#+end_src


** labels

Use the ~labels~ command to make function names available in defined functions.

#+begin_src common-lisp

   ;; define a(n) = n + 5 and use it in the
   ;; definition of b(n) = a(n) + 6
   (labels ((a (n)
	      (+ n 5))
	    (b (n)
	      (+ (a n) 6)))
     (b 10))

#+end_src

* Summary

+ To define a global variable, use the ~defparameter~ command.
+ To define a global function, use the ~defun~ command.
+ Use ~let~ and ~flet~ command to define local variables and functions, respectively.
+ The function ~labels~ is like ~flet~, but it lets functions call themselves.
